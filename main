package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"sync"
	"time"
)

// Document structure to match the JSON structure to be sent
type Document struct {
	Date     string `json:"date"`
	Output   string `json:"output"`
	ToolName string `json:"toolname"`
}

// Function to send a single document to Elasticsearch
func sendToElasticsearch(esHost, indexName, username, password string, doc Document, wg *sync.WaitGroup) {
	defer wg.Done()

	// Convert the document to JSON
	data, err := json.Marshal(doc)
	if err != nil {
		log.Printf("Error creating JSON: %v", err)
		return
	}

	// Prepare request to send JSON to Elasticsearch
	url := fmt.Sprintf("%s/%s/_doc", esHost, indexName)
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(data))
	if err != nil {
		log.Printf("Error creating request: %v", err)
		return
	}
	req.Header.Set("Content-Type", "application/json")
	req.SetBasicAuth(username, password)

	// Send request to Elasticsearch
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Error sending data to Elasticsearch: %v", err)
		return
	}
	defer resp.Body.Close()

	// Check response status
	if resp.StatusCode != http.StatusCreated {
		log.Printf("Failed to insert document. Status: %s", resp.Status)
	} else {
		fmt.Println("Document inserted successfully.")
	}
}

func main() {
	// Flags for Elasticsearch config and parameters
	esHost := flag.String("es_host", "http://localhost:9200", "Elasticsearch host URL")
	username := flag.String("username", "", "Elasticsearch username")
	password := flag.String("password", "", "Elasticsearch password")
	indexName := flag.String("indexname", "", "Elasticsearch index name")
	toolName := flag.String("tool", "tool", "Tool name (optional, default is 'tool')")
	flag.Parse()

	var wg sync.WaitGroup

	// Read from stdin and create a document for each line
	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		line := scanner.Text()
		document := Document{
			Date:     time.Now().Format(time.RFC3339),
			Output:   line,
			ToolName: *toolName,
		}

		// Increment WaitGroup counter and launch a goroutine for each insertion
		wg.Add(1)
		go sendToElasticsearch(*esHost, *indexName, *username, *password, document, &wg)
	}

	// Wait for all goroutines to complete
	wg.Wait()

	// Handle scanning errors
	if err := scanner.Err(); err != nil {
		log.Fatalf("Error reading stdin: %v", err)
	}
}

